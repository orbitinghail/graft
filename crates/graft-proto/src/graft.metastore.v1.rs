// @generated
// This file is @generated by prost-build.
/// Request a snapshot of the volume at the given LSN (or latest).
/// Returns: graft.metastore.v1.SnapshotResponse
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SnapshotRequest {
    #[prost(bytes="bytes", tag="1")]
    pub vid: ::prost::bytes::Bytes,
    #[prost(uint64, optional, tag="2")]
    pub lsn: ::core::option::Option<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SnapshotResponse {
    #[prost(message, optional, tag="1")]
    pub snapshot: ::core::option::Option<super::super::common::v1::Snapshot>,
}
/// Retrieve the snapshot at the end of the given LSN range along with a Splinter
/// containing all changed indices. If the start of the range is Unbounded, it
/// will be set to the last checkpoint.
/// Returns: graft.metastore.v1.PullGraftResponse
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PullGraftRequest {
    #[prost(bytes="bytes", tag="1")]
    pub vid: ::prost::bytes::Bytes,
    #[prost(message, optional, tag="2")]
    pub range: ::core::option::Option<super::super::common::v1::LsnRange>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PullGraftResponse {
    #[prost(message, optional, tag="1")]
    pub snapshot: ::core::option::Option<super::super::common::v1::Snapshot>,
    #[prost(message, optional, tag="2")]
    pub range: ::core::option::Option<super::super::common::v1::LsnRange>,
    #[prost(bytes="bytes", tag="3")]
    pub graft: ::prost::bytes::Bytes,
}
/// Retrieve all of the commits to the Volume in the provided LSN Range. If the
/// start of the range is Unbounded, it will be set to the last checkpoint.
/// Returns: graft.metastore.v1.PullSegmentsResponse
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PullCommitsRequest {
    #[prost(bytes="bytes", tag="1")]
    pub vid: ::prost::bytes::Bytes,
    #[prost(message, optional, tag="2")]
    pub range: ::core::option::Option<super::super::common::v1::LsnRange>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PullCommitsResponse {
    #[prost(message, repeated, tag="1")]
    pub commits: ::prost::alloc::vec::Vec<super::super::common::v1::Commit>,
}
/// Commit changes to a Volume if it is safe to do so. The provided Snapshot LSN
/// is the snapshot the commit was based on. Returns the newly committed Snapshot
/// metadata on success.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommitRequest {
    #[prost(bytes="bytes", tag="1")]
    pub vid: ::prost::bytes::Bytes,
    #[prost(bytes="bytes", tag="2")]
    pub cid: ::prost::bytes::Bytes,
    #[prost(uint64, optional, tag="3")]
    pub snapshot_lsn: ::core::option::Option<u64>,
    #[prost(uint32, tag="4")]
    pub page_count: u32,
    #[prost(message, repeated, tag="5")]
    pub segments: ::prost::alloc::vec::Vec<super::super::common::v1::SegmentInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommitResponse {
    #[prost(message, optional, tag="1")]
    pub snapshot: ::core::option::Option<super::super::common::v1::Snapshot>,
}
// @@protoc_insertion_point(module)
