syntax = "proto3";
package graft.remote.v1;

import "google/protobuf/timestamp.proto";
import "graft/core/v1/gid.proto";
import "graft/core/v1/lsn.proto";
import "graft/core/v1/page.proto";
import "graft/core/v1/graft.proto";
import "graft/core/v1/commit_hash.proto";

// A Volume has a top level control file stored at
// `{prefix}/{vid}/control`
// Control files are immutable.
message Control {
  // The Volume ID stored as a 16 byte GID.
  graft.core.v1.VolumeId vid = 1;

  // The parent reference if this Volume is a fork.
  optional VolumeRef parent = 2;

  // The creation timestamp of this Volume.
  google.protobuf.Timestamp created_at = 3;
}

// When a Volume is forked, a ref is first written to the parent Volume:
// `{prefix}/{parent-vid}/forks/{fork-vid}`
// Forks are immutable.
message Fork {
  // The VID of the fork.
  graft.core.v1.VolumeId fork_vid = 1;

  // The fork point. Must match the parent field in the Fork's Control file.
  VolumeRef parent = 2;
}

// A reference to a Volume at a particular LSN.
message VolumeRef {
  // The Volume ID stored as a 16 byte GID.
  graft.core.v1.VolumeId vid = 1;

  // The referenced LSN.
  graft.core.v1.LSN lsn = 2;
}

// A Volume's CheckpointSet is stored at `{prefix}/{vid}/checkpoints`.
// CheckpointSets are updated by the checkpointer via compare-and-swap.
message CheckpointSet {
  // The Volume ID stored as a 16 byte GID.
  graft.core.v1.VolumeId vid = 1;

  // The set of checkpoint LSNs.
  graft.core.v1.LSNSet lsns = 2;
}

// A snapshot of a Volume.
message Snapshot {
  // The Volume ID stored as a 16 byte GID.
  graft.core.v1.VolumeId vid = 1;

  // The LSN of the Volume at this Snapshot.
  graft.core.v1.LSN lsn = 2;

  // The Volume's page count at this Snapshot.
  graft.core.v1.PageCount page_count = 3;
}

// Commits are stored at `{prefix}/{vid}/log/{lsn}`.
// A commit may not include a SegmentRef if only the Volume's page count has
// changed. This happens when the Volume is extended or truncated without
// additional writes.
// Commits are immutable.
message Commit {
  // The Volume Snapshot at this Commit.
  Snapshot snapshot = 1;

  // An optional CommitHash for this Commit.
  // Always present on Remote Volume commits.
  // May be omitted on Local commits.
  optional graft.core.v1.CommitHash hash = 2;

  // If this Commit contains any pages, `segment_ref` records details on the
  // relevant Segment.
  optional SegmentRef segment_ref = 3;

  // If this commit is a checkpoint, this timestamp is set and records the time
  // the commit was made a checkpoint
  optional google.protobuf.Timestamp checkpoint_ts = 4;
}

message SegmentRef {
  // The 16 byte Segment ID.
  graft.core.v1.SegmentId sid = 1;

  // The set of pageidxs stored in this Segment.
  graft.core.v1.Graft graft = 2;

  // An index of frames contained by the Segment.
  // Empty on Local Segments which have not been encoded and uploaded to object
  // storage.
  repeated SegmentFrame frames = 3;
}

message SegmentFrame {
  // The length of the compressed frame in bytes.
  uint32 frame_size = 1;

  // The last pageidx stored in the frame
  graft.core.v1.PageIdx last_pageidx = 2;
}
