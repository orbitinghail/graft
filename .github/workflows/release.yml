name: Release Graft

on:
  workflow_run:
    workflows: ["Prepare release"]
    types: [completed]
    branches:
      - "release/**"

concurrency:
  group: release-publish
  cancel-in-progress: true

jobs:
  notify:
    # Only continue if the upstream workflow finished without errors
    if: |
      github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-24.04
    permissions:
      checks: write
    steps:
      - name: Update summary
        run: |
          echo 'Triggered by commit: ${{ github.event.workflow_run.head_sha }}' >> $GITHUB_STEP_SUMMARY
          COMMIT_URL="${{ github.event.workflow_run.head_repository.html_url }}/commit/${{ github.event.workflow_run.head_sha }}"
          echo "$COMMIT_URL" >>"$GITHUB_STEP_SUMMARY"

      - name: Post GitHub check
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.payload.workflow_run.head_sha;
            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;

            await github.rest.checks.create({
              owner,
              repo,
              name: "Ready to release",
              head_sha: sha,
              status: "completed",
              conclusion: "success",
              output: {
                title: "Ready to release",
                summary: `See full run [here](${runUrl}).`
              },
              details_url: runUrl
            });

  release:
    needs: notify
    runs-on: ubuntu-24.04
    environment: publishing
    permissions:
      contents: write
      id-token: write
      packages: write
      actions: read

    steps:
      - uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2
        id: app-token
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_PRIVATE_KEY }}

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          token: ${{ steps.app-token.outputs.token }}
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-tags: true
          fetch-depth: 0

      - name: Download distx artifact from the 'Prepare release' run
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: distx
          run-id: ${{ github.event.workflow_run.id }}
          path: distx/
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Read metadata files
        id: meta
        run: |
          set -euo pipefail
          METASTORE_TAG=$(cat distx/metastore_tag)
          PAGESTORE_TAG=$(cat distx/pagestore_tag)
          VERSION=$(cat distx/version)

          echo "metastore_tag=$METASTORE_TAG" >>"$GITHUB_OUTPUT"
          echo "pagestore_tag=$PAGESTORE_TAG" >>"$GITHUB_OUTPUT"
          echo "version=$VERSION"             >>"$GITHUB_OUTPUT"

          if [[ "$VERSION" == *-rc* ]]; then
            echo "prerelease=true" >>"$GITHUB_OUTPUT"
          else
            echo "prerelease=false" >>"$GITHUB_OUTPUT"
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install node
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org"

      - name: Install uv
        uses: astral-sh/setup-uv@d0cc045d04ccac9d8b7881df0226f9e82c39688e # v6
        with:
          enable-cache: false
          cache-dependency-glob: ""

      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.4.7

      - name: Get GitHub Bot User ID
        id: get-bot-id
        run: echo "bot-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Configure git
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-bot-id.outputs.bot-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - name: Push git tag
        run: |
          set -euo pipefail
          TAG_NAME="v${{ steps.meta.outputs.version }}"
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"

      - name: Update GitHub Release
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2
        with:
          name: v${{ steps.meta.outputs.version }}
          draft: false
          tag_name: v${{ steps.meta.outputs.version }}
          prerelease: ${{ steps.meta.outputs.prerelease }}
          make_latest: ${{ steps.meta.outputs.prerelease == 'false' }}

      - name: Publish crates
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          set -euo pipefail
          CRATES=(
            graft-tracing
            graft-core
            graft-proto
            graft-client
            graft-sqlite
          )
          for crate in "${CRATES[@]}"; do
            cargo publish --no-verify -p "$crate"
          done

      - name: Publish metastore and pagestore images
        env:
          METASTORE_SRC: ${{ steps.meta.outputs.metastore_tag }}
          PAGESTORE_SRC: ${{ steps.meta.outputs.pagestore_tag }}
          VERSION: ${{ steps.meta.outputs.version }}
          PRERELEASE: ${{ steps.meta.outputs.prerelease }}
        run: |
          set -euo pipefail

          # copies the entire manifest list without pulling layers
          copy_manifest() {
            local src="$1" repo="$2" ver="$3"
            # always tag the specific version
            local args=(--tag "${repo}:${ver}")
            # add :latest only when this is **not** a pre-release
            [[ "${PRERELEASE}" == "false" ]] && args+=(--tag "${repo}:latest")

            docker buildx imagetools create "${args[@]}" "${src}"
          }

          copy_manifest "${METASTORE_SRC}" "ghcr.io/orbitinghail/metastore" "${VERSION}"
          copy_manifest "${PAGESTORE_SRC}"  "ghcr.io/orbitinghail/pagestore"  "${VERSION}"

      - name: Publish NPM Packages
        run: |
          for file in distx/npm/*; do
            npm publish --access public "$file"
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish Ruby Packages
        run: |
          for file in distx/gem/*; do
            gem push "$file"
          done
        env:
          GEM_HOST_API_KEY: ${{ secrets.GEM_HOST_API_KEY }}

      - name: Publish PyPI Packages
        run: |
          uv publish distx/pip/*
          uv publish distx/datasette/*
          uv publish distx/sqlite_utils/*

      - name: Publish libgraft Swift package
        uses: benc-uk/workflow-dispatch@e2e5e9a103e331dad343f381a29e654aea3cf8fc # v1.2.4
        with:
          workflow: update.yml
          repo: orbitinghail/libgraft.swift
          ref: main
          token: ${{ steps.app-token.outputs.token }}
