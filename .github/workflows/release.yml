name: Release libgraft

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  release:
    strategy:
      matrix:
        platform:
          - os-name: linux-x86_64
            runs-on: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            setup: |
              sudo apt-get update
              sudo apt-get install -y mold libclang-dev clang
            pre-build: ""
            post-build: |
              cd target/release
              tar -czf libgraft-linux-x86_64.tar.gz libgraft.so
            artifact_name: libgraft-linux-x86_64.tar.gz

          - os-name: linux-aarch64
            runs-on: ubuntu-24.04
            target: aarch64-unknown-linux-gnu
            setup: |
              sudo apt-get update
              sudo apt-get install -y mold libclang-dev clang
            pre-build: ""
            post-build: |
              cd target/release
              tar -czf libgraft-linux-aarch64.tar.gz libgraft.so
            artifact_name: libgraft-linux-aarch64.tar.gz

          - os-name: windows-x86_64
            runs-on: windows-2022
            target: x86_64-pc-windows-msvc
            setup: ""
            pre-build: ""
            post-build: |
              cd .\target\release
              Rename-Item graft.dll libgraft.dll
              Compress-Archive `
                -Path ".\libgraft.dll" `
                -DestinationPath ".\libgraft-windows-x86_64.zip"
            artifact_name: libgraft-windows-x86_64.zip

          - os-name: windows-aarch64
            runs-on: windows-2022
            target: aarch64-pc-windows-msvc
            setup: ""
            pre-build: ""
            post-build: |
              cd .\target\release
              Rename-Item graft.dll libgraft.dll
              Compress-Archive `
                -Path ".\libgraft.dll" `
                -DestinationPath ".\libgraft-windows-aarch64.zip"
            artifact_name: libgraft-windows-aarch64.zip

          - os-name: macos-x86_64
            runs-on: macOS-14
            target: x86_64-apple-darwin
            setup: ""
            pre-build: export LIBCLANG_PATH=$(brew --prefix llvm@15)/lib
            post-build: |
              cd target/release
              tar -czf libgraft-macos-x86_64.tar.gz libgraft.dylib
            artifact_name: libgraft-macos-x86_64.tar.gz

          - os-name: macos-aarch64
            runs-on: macOS-14
            target: aarch64-apple-darwin
            setup: ""
            pre-build: export LIBCLANG_PATH=$(brew --prefix llvm@15)/lib
            post-build: |
              cd target/release
              tar -czf libgraft-macos-aarch64.tar.gz libgraft.dylib
            artifact_name: libgraft-macos-aarch64.tar.gz

    name: Build - ${{ matrix.platform.os-name }}
    runs-on: ${{ matrix.platform.runs-on }}
    steps:
      - name: system dependencies
        run: ${{ matrix.platform.setup }}

      - uses: dtolnay/rust-toolchain@888c2e1ea69ab0d4330cbf0af1ecc7b68f368cc1 # v1
        with:
          toolchain: 1.85

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          persist-credentials: false

      - name: Build libgraft
        run: |
          ${{ matrix.platform.pre-build }}
          cargo build --release --features precept/disabled --package graft-sqlite-extension
          ${{ matrix.platform.post-build }}
      
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{matrix.platform.os-name}}
          path: dist/target/release/libgraft.*
      - name: Create GitHub Release
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # v2
        with:
          draft: true
          generate_release_notes: true
          files: target/release/${{ matrix.platform.artifact_name }}


  dist:
    runs-on: ubuntu-latest
    needs:
      [release]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: dist/
      - run: |
          curl -L https://github.com/asg017/sqlite-dist/releases/download/v0.0.1-alpha.17/sqlite-dist-x86_64-unknown-linux-gnu.tar.xz \
            | tar xfJ - --strip-components 1
      - run: 
          SQLITE_GRAFT_VERSION=$(grep '^version' crates/graft-sqlite-extension/Cargo.toml | head -n1 | awk -F\" '{print $2}');
          ./sqlite-dist ./sqlite-dist.toml --input dist/ --output distx/ --version $SQLITE_GRAFT_VERSION
      
      # the remaining steps here are for publishing the artifacts generated by sqlite-dist
      # to their respective package registries. One day sqlite-dist will do this for us
      - run: |
          gh release upload ${{ github.ref_name }} \
            distx/github_releases/* \
            distx/checksums.txt \
            distx/sqlite-dist-manifest.json \
            distx/install.sh
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          registry-url: "https://registry.npmjs.org"
      - run: |
          for file in distx/npm/*; do
          
            npm publish --access public distx/npm/sqlite-graft-darwin-arm64.tar.gz
            npm publish --access public distx/npm/sqlite-graft-darwin-x64.tar.gz
            npm publish --access public distx/npm/sqlite-graft-linux-x64.tar.gz
            npm publish --access public distx/npm/sqlite-graft-linux-arm64.tar.gz
            npm publish --access public distx/npm/sqlite-graft-windows-x64.tar.gz
            npm publish --access public distx/npm/sqlite-graft.tar.gz
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2
      - run: |
          for file in distx/gem/*; do
            gem push  "$file"
          done
        env:
          GEM_HOST_API_KEY: ${{ secrets.GEM_HOST_API_KEY }}
      - uses: astral-sh/setup-uv@v5
      - run: |
          uv publish distx/pip/*
          uv publish distx/datasette/*
          uv publish distx/sqlite_utils/*
        env:
          UV_PUBLISH_USERNAME: __token__
          UV_PUBLISH_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}