#!/usr/bin/env bash
set -euo pipefail

GIT_ROOT="$(git rev-parse --show-toplevel)"

# detect platform
UNAME_KERNEL="$(uname -s)"
case "${UNAME_KERNEL}" in
    Linux*) PLATFORM=linux ;;
    Darwin*) PLATFORM=osx ;;
    *)
        echo "Unsupported platform: ${UNAME_KERNEL}"
        exit 1
        ;;
esac

if [[ -z "${SQLITE_TEST-}" ]]; then
    SQLITE_YEAR=2025
    SQLITE_VERSION=3500100
else
    SQLITE_YEAR=2023
    SQLITE_VERSION=3430000
fi

SQLITE_SRC_URL="https://www.sqlite.org/${SQLITE_YEAR}/sqlite-autoconf-${SQLITE_VERSION}.tar.gz"
SQLITE_DIR="${GIT_ROOT}/target/sqlite-${SQLITE_VERSION}"
SQLITE_BIN="${SQLITE_DIR}/sqlite3"

# compile sqlite3 if needed
if [ ! -f "${SQLITE_BIN}" ]; then
  echo "Downloading sqlite3 from ${SQLITE_SRC_URL} into ${SQLITE_DIR}"
  mkdir -p "${SQLITE_DIR}"
  SQLITE_TAR="$(mktemp -d)/sqlite3.tar.gz"
  curl -L -o "${SQLITE_TAR}" "${SQLITE_SRC_URL}"
  tar -C "${SQLITE_DIR}" -xzf "${SQLITE_TAR}"
  rm "${SQLITE_TAR}"
  cd "${SQLITE_DIR}/sqlite-autoconf-${SQLITE_VERSION}"
  export CFLAGS="\
      -DSQLITE_ENABLE_DBSTAT_VTAB \
      -DSQLITE_ENABLE_BYTECODE_VTAB \
      -DSQLITE_ENABLE_FTS4 \
      -DSQLITE_ENABLE_FTS5 \
      -DSQLITE_ENABLE_MATH_FUNCTIONS \
      -DSQLITE_THREADSAFE=0 \
      -DSQLITE_ENABLE_EXPLAIN_COMMENTS \
      -DHAVE_READLINE \
      -DSQLITE_ENABLE_ATOMIC_WRITE \
  "
  ./configure \
      --with-readline-ldflags="-L/opt/homebrew/opt/readline/lib -lreadline" \
      --with-readline-header="/opt/homebrew/opt/readline/include/readline/readline.h"
  make -j
  mv sqlite3 "${SQLITE_DIR}"
fi

# exec sqlite3 with all arguments
exec "${SQLITE_BIN}" "$@"
