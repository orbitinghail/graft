#!/usr/bin/env bash
set -euo pipefail

RELEASE_FLAGS="--no-verify"
EXECUTE=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --execute)
            RELEASE_FLAGS="--execute --no-confirm"
            EXECUTE="true"
            shift
            ;;
        *)
            break
            ;;
    esac
done

if [[ $# -eq 0 ]]; then
    echo "Usage: $0 [--execute] VERSION"
    exit 1
fi

VERSION=$1
if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "Version must match the format X.Y.Z"
    exit 1
fi

RELEASE_CRATES=(
    graft-proto
    graft-core
    graft-tracing
    graft-client
    graft-sqlite
)

# make sure we are on the main branch
current_branch=$(git rev-parse --abbrev-ref HEAD)
if [ "$current_branch" != "main" ]; then
    echo "Error: Not on main branch (currently on '$current_branch')."
    exit 1
fi

# verify that main == origin/main
git fetch origin
HEAD_COMMIT=$(git rev-parse HEAD)
ORIGIN_MAIN_COMMIT=$(git rev-parse origin/main)

if [ "$HEAD_COMMIT" != "$ORIGIN_MAIN_COMMIT" ]; then
    echo "Error: HEAD ($HEAD_COMMIT) is not equal to origin/main ($ORIGIN_MAIN_COMMIT)."
    exit 1
fi

for crate in "${RELEASE_CRATES[@]}"; do
    cargo release --no-push --no-tag --package ${crate} ${RELEASE_FLAGS} ${VERSION}
done

# update the graft-sqlite-extension version without releasing it
cargo release --no-push --no-tag --no-publish \
    --package graft-sqlite-extension \
    ${RELEASE_FLAGS} ${VERSION}

# squash, tag, and push the release commit
if [ -n "$EXECUTE" ]; then
    # squash all of the cargo release commits into a single commit
    git reset --soft "$HEAD_COMMIT"
    git commit -m "chore: Release v${VERSION}"

    git tag -a v${VERSION} -m "Release v${VERSION}"
    git push origin v${VERSION}
    git push origin main
else
    echo "To execute the release, run:"
    echo "  $0 --execute ${VERSION}"
fi
